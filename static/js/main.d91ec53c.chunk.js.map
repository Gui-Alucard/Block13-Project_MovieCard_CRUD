{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/MovieCard.js","components/Header.js","services/movieData.js","services/movieAPI.js","pages/EditMovie.js","pages/MovieDetails.js","pages/MovieList.js","pages/NewMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Loading","Component","MovieForm","props","state","movie","title","subtitle","imagePath","storyline","rating","handleSubmit","bind","onSubmit","this","field","newValue","setState","className","htmlFor","placeholder","id","type","value","onChange","event","updateMovie","target","genre","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","MovieCard","to","alt","src","Header","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","getMovies","Promise","resolve","setTimeout","getMovie","movieId","find","mov","parseInt","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","EditMovie","movieAPI","match","params","editState","oldMovie","shouldRedirect","console","log","data-testid","MovieDetails","requisition","setNewState","newState","MovieList","key","NewMovie","NotFound","App","exact","path","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d91ec53c.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    const movie = {\n      title: '',\n      subtitle: '',\n      imagePath: '',\n      storyline: '',\n      rating: '',\n    };\n    this.state = {\n      ...props.movie || movie,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div className=\"div-validade\">\n        <label htmlFor=\"movie_title\">Título</label>\n        <input\n          placeholder=\"Insira o título\"\n          id=\"movie_title\"\n          type=\"text\"\n          className=\"validate\"\n          value={title}\n          onChange={(event) => this.updateMovie('title', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div className=\"div-form-sub\">\n        <label htmlFor=\"movie_subtitle\">Subtítulo</label>\n        <input\n          placeholder=\"Insira o subtítulo\"\n          id=\"movie_subtitle\"\n          className=\"form-sub\"\n          type=\"text\"\n          value={subtitle}\n          onChange={(event) => this.updateMovie('subtitle', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row div-form-img\">\n        <label htmlFor=\"movie_image\">Imagem</label>\n        <input\n          placeholder=\"Insira o caminho da imagem\"\n          id=\"movie_image\"\n          className=\"form-img\"\n          type=\"text\"\n          value={imagePath}\n          onChange={(event) => this.updateMovie('imagePath', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div className=\"div-form-text-area\">\n        <label htmlFor=\"movie_storyline\">Sinopse</label>\n        <textarea\n          className=\"form-text-area\"\n          id=\"movie_storyline\"\n          value={storyline}\n          onChange={(event) => this.updateMovie('storyline', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n\n    return (\n      <div className=\"div-form-genre\">\n        <label htmlFor=\"movie_genre\">Gênero</label>\n        <select\n          id=\"movie_genre\"\n          className=\"form-genre\"\n          value={genre}\n          onChange={(event) => this.updateMovie('genre', event.target.value)}\n        >\n          <option value=\"action\">Ação</option>\n          <option value=\"comedy\">Comédia</option>\n          <option value=\"thriller\">Suspense</option>\n          <option value=\"fantasy\">Fantasia</option>\n          <option value=\"crime\">Crime</option>\n          <option value=\"war\">Guerra</option>\n          <option value=\"sci-fi\">Sci-Fi</option>\n        </select>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n\n    return (\n      <div className=\"div-form-rate\">\n        <label htmlFor=\"movie_rating\">Avaliação</label>\n        <input\n          placeholder=\"Dê a avaliação do filme\"\n          className=\"form-rate\"\n          id=\"movie_rating\"\n          type=\"number\"\n          step={0.1}\n          min={0}\n          max={5}\n          value={rating}\n          onChange={(event) => this.updateMovie('rating', event.target.value)}\n        />\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          className=\"form-btn\"\n          type=\"button\"\n          onClick={this.handleSubmit}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"form-container\">\n        <div className=\"movie-form\">\n          <form>\n            {this.renderTitleInput()}\n            {this.renderSubtitleInput()}\n            {this.renderImagePathInput()}\n            {this.renderStorylineInput()}\n            {this.renderGenreSelection()}\n            {this.renderRatingInput()}\n            {this.renderSubmitButton()}\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: propTypes.shape({\n    title: propTypes.string,\n    subtitle: propTypes.string,\n    imagePath: propTypes.string,\n    storyline: propTypes.string,\n    rating: propTypes.string,\n  }).isRequired,\n  onSubmit: propTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport propTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, storyline, imagePath, id } = movie;\n    return (\n      <div className=\"movie-card\" >\n        <div className=\"movie-card-detail\">\n          <Link className=\"movie-card-detail\" to={`/movies/${id}`}>\n            <img alt=\"Movie Cover\" className=\"movie-card-image\" src={imagePath} />\n            <div className=\"movie-card-body\">\n              <h4 className=\"movie-card-title\">{title}</h4>\n              <p className=\"movie-card-storyline\">{storyline}</p>\n            </div>\n          <span className=\"movie-card-a\">VER DETALHES</span></Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: propTypes.shape({\n    title: propTypes.string,\n    storyline: propTypes.string,\n    imagePath: propTypes.string,\n    id: propTypes.number,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <Link to='/'>\n          <div className=\"movie-icon\" />\n        </Link>\n        <h1 className=\"page-title\" >Movie Cards Library - CRUD</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n  {\n    id: 6,\n    title: 'Arrival',\n    subtitle: 'Why Are They Here?',\n    storyline: 'Quando seres interplanetários deixam marcas na Terra, a Dra. Louise Banks (Amy Adams), uma linguista especialista no assunto, é procurada por militares para traduzir os sinais e desvendar se os alienígenas representam uma ameaça ou não. No entanto, a resposta para todas as perguntas e mistérios pode ameaçar a vida de Louise e a existência de toda a humanidade.',\n    rating: 4.2,\n    imagePath: 'images/arrival.jpg',\n    bookmarked: true,\n    genre: 'sci-Fi',\n  },\n  {\n    id: 7,\n    title: 'Schindler\\'s List',\n    subtitle: 'The List Is Life',\n    storyline: 'A inusitada história de Oskar Schindler (Liam Neeson), um sujeito oportunista, sedutor, \"armador\", simpático, comerciante no mercado negro, mas, acima de tudo, um homem que se relacionava muito bem com o regime nazista, tanto que era membro do próprio Partido Nazista...',\n    rating: 3.9,\n    imagePath: 'images/Schindler.jpg',\n    bookmarked: true,\n    genre: 'war',\n  },\n  {\n    id: 8,\n    title: 'Enola Holmes',\n    subtitle: 'The List Is Life',\n    storyline: 'Enola Holmes (Millie Bobby Brown) é uma menina adolescente cujo irmão, 20 anos mais velho, é o renomado detetive Sherlock Holmes (Henry Cavill). Quando sua mãe desaparece, fugindo do confinamento da sociedade vitoriana e deixando dinheiro para trás para que ela faça o mesmo, a menina inicia uma investigação para descobrir o paradeiro dela, ao mesmo tempo em que precisa ir contra os desejos de seu irmão, Mycroft (Sam Claflin), que quer mandá-la para um colégio interno só de meninas.',\n    rating: 4.1,\n    imagePath: 'images/enola.jpg',\n    bookmarked: true,\n    genre: 'crime',\n  },\n  {\n    id: 9,\n    title: 'Black Panther',\n    subtitle: 'Black Panther',\n    storyline: 'Em Pantera Negra, após a morte do rei T\\'Chaka (John Kani), o príncipe T\\'Challa (Chadwick Boseman) retorna a Wakanda para a cerimônia de coroação. Nela são reunidas as cinco tribos que compõem o reino, sendo que uma delas, os Jabari, não apoia o atual governo. T\\'Challa logo recebe o apoio de Okoye (Danai Gurira), a chefe da guarda de Wakanda, da irmã Shuri (Letitia Wright), que coordena a área tecnológica do reino, e também de Nakia (Lupita Nyong\\'o), a grande paixão do atual Pantera Negra, que não quer se tornar rainha. Juntos, eles estão à procura de Ulysses Klaue (Andy Serkis), que roubou de Wakanda um punhado de vibranium, alguns anos atrás.',\n    rating: 4.3,\n    imagePath: 'images/black.jpeg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 10,\n    title: 'The Corn Is Green',\n    subtitle: 'The Corn Is Green',\n    storyline: 'A entusiasmada professora Lilly Moffat (Katharine Hepburn) está determinada a educar crianças pobres e analfabetas em uma comunidade do país de Gales. Ela encontra resistência ao seu projeto no escudeiro local (Bill Fraser) e é desestimulada. Contudo, ela descobre Morgan Evans (Ian Saynor), um brihante estudante com um futuro não tão animador, e decide ajudá-lo a realizar seu potencial.',\n    rating: 5.0,\n    imagePath: 'images/corn.jpg',\n    bookmarked: true,\n    genre: 'comedy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\n\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    setTimeout(() => {\n      const movies = readMovies();\n      resolve(movies);\n    }, 2000);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(movie);\n    }, 2000);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => {\n  const movies = readMovies().map((movie) => {\n    if (movie.id === parseInt(updatedMovie.id, 10)) {\n      return { ...movie, ...updatedMovie };\n    }\n    return movie;\n  });\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const createMovie = (movieData) => {\n  let movies = readMovies();\n  const nextId = movies[movies.length - 1].id + 1;\n  const newMovie = { ...movieData, id: nextId };\n  movies = [...movies, newMovie];\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ status: 'OK' });\n    }, 1000);\n  });\n};\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { Loading } from '../components';\nimport { MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: false,\n      movie: {},\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    const { getMovie } = movieAPI;\n    const { id } = this.props.match.params;\n    const movie = await getMovie(id);\n    this.editState(movie);\n  }\n\n  editState(oldMovie) {\n    this.setState({\n      status: true,\n      movie: oldMovie,\n    });\n  }\n\n  handleSubmit(updatedMovie) {\n    const { updateMovie } = movieAPI;\n    updateMovie(updatedMovie);\n    this.setState({\n      shouldRedirect: updatedMovie,\n    });\n    console.log(updatedMovie);\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    if (status === false) {\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={movie} onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: propTypes.shape({\n    isExact: propTypes.bool,\n    params: propTypes.shape({\n      id: propTypes.string,\n      path: propTypes.string,\n      url: propTypes.string,\n    }),\n    path: propTypes.string,\n    url: propTypes.string,\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movie: {},\n      requisition: false,\n    };\n  }\n\n  async componentDidMount() {\n    const { getMovie } = movieAPI;\n    const { id } = this.props.match.params;\n    const movie = await getMovie(id);\n    this.setNewState(movie);\n  }\n\n  setNewState(newState) {\n    this.setState({\n      movie: newState,\n      requisition: true,\n    });\n  }\n\n  render() {\n    const { movie, requisition } = this.state;\n    const { id } = this.props.match.params;\n    const { deleteMovie } = movieAPI;\n    // Change the condition to check the state\n    // if (true) return <Loading />;\n    if (requisition === false) return <Loading />;\n\n    const { title, storyline, imagePath, genre, rating, subtitle } = movie;\n\n    return (\n      <div className=\"details-container\">\n        <div className=\"movie-details\" data-testid=\"movie-details\">\n          <div className=\"img-cont\">\n            <img alt=\"Movie Cover\" src={`../${imagePath}`} />\n          </div>\n          <div className=\"movie-info\">\n            <h4 className=\"movie-title\">{`Title: ${title}`}</h4>\n            <p className=\"movie-subtitle\">{`Subtitle: ${subtitle}`}</p>\n            <p className=\"movie-storyline\">{`Storyline: ${storyline}`}</p>\n            <p className=\"movie-genre\">{`Genre: ${genre}`}</p>\n            <div className=\"rating\">\n              <p className=\"movie-rate\">{`Rating: ${rating}`}</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"movie-links\">\n          <Link className=\"movie-edit\" to={`/movies/${id}/edit`}>EDITAR</Link>\n          <Link  className=\"movie-back\"to=\"/\">VOLTAR</Link>\n          <Link  className=\"movie-delete\" to=\"/\" onClick={() => deleteMovie(id)}>DELETAR</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: propTypes.shape({\n    isExact: propTypes.bool,\n    params: propTypes.shape({\n      id: propTypes.string,\n      path: propTypes.string,\n      url: propTypes.string,\n    }),\n    path: propTypes.string,\n    url: propTypes.string,\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\nimport { Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      requisition: false,\n    };\n  }\n\n  async componentDidMount() {\n    const { getMovies } = movieAPI;\n    const movie = await getMovies();\n    this.setNewState(movie);\n  }\n\n  setNewState(newState) {\n    this.setState({\n      movies: newState,\n      requisition: true,\n    });\n  }\n\n  render() {\n    const { movies, requisition } = this.state;\n    // Render Loading here if the request is still happening.\n    if (requisition === false) return <Loading />;\n\n    return (\n      <div className=\"movie-list-container\">\n        <div className=\"movie-list\">\n          {movies.map((movie) => <MovieCard key={movie.title} movie={movie} />)}\n        </div>\n        <div className=\"movie-link\">\n          <Link to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport propTypes from 'prop-types';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    const movie = {\n      title: '',\n      subtitle: '',\n      imagePath: '',\n      storyline: '',\n      rating: '',\n    };\n    this.state = {\n      ...props.movie || movie,\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleSubmit(newMovie) {\n    const { createMovie } = movieAPI;\n    await createMovie(newMovie);\n    this.setState({\n      shouldRedirect: true,\n    });\n    console.log(newMovie);\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  movie: propTypes.instanceOf(propTypes.object, propTypes.string).isRequired,\n};\n\nexport default NewMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { MovieList, MovieDetails, NewMovie, EditMovie, NotFound } from './pages/index';\nimport { Header } from './components/index';\n\nimport './App.css';\nimport './components/MovieForm.css';\nimport './pages/MovieDetails.css';\n\nfunction App() {\n  return (\n    <div className=\"body-html\">\n      <BrowserRouter>\n        <Header />\n        <Switch>\n          <Route exact path=\"/movies/new\"><NewMovie /></Route>\n          <Route exact path=\"/movies/:id\" render={(props) => <MovieDetails {...props} />} />\n          <Route exact path=\"/movies/:id/edit\" render={(props) => <EditMovie {...props} />} />\n          <Route exact path=\"/\"><MovieList /></Route>\n          <Route><NotFound /></Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}